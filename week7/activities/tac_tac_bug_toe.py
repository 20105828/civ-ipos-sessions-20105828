'''A buggy Tic-Tac-Toe game that provides an opportunity to debug code by both reasoning about it and stepping through it in a debugger.
The program has a number of bugs that are introduced one at a time. The goal is to find and fix the bugs.
Ensure you step through this program in an IDE debugger to understand how the program works and to find the bugs.'''

# A buggy Tic-Tac-Toe game partially generated by ChatGPT-4

board = [[' ' for _ in range(3)] for _ in range(3)]


def print_board():
    """
    Prints the game board
    
    Parameters
    ----------
    row : list of strings
        This contains the rows for the game board.
    board : list of lists that contains strings
        This is the game board.
    
    Examples
    ----------
    >>> print_board()
     | |
    -----
     | | 
    -----
     | | 
    -----
    """
    for row in board:
        print('|'.join(row))
        print('-' * 5)


def is_win(player):
    '''
    Checks rows, columns, and diagonals for win conditions for a given player

    Parameters
    ----------
    i : int
        Default variable for the for loop.
    j : int
        Default variable for the columns if statement.
    cell : str
        A position on the game board .
    player : any
        One of the players(X/O).
    board : list of lists that contains strings
        This is the game board.
    
    Returns
    ----------
    True/False : boolean
        Returns True or False depending on the if statements.

    Examples
    ----------
    >>> is_win()
    
    '''
    for i in range(3):
        if all([cell == player for cell in board[i]]):  # Rows
            return False 
        if not all([board[j][i] == player for j in range(3)]):  # Columns
            return False
    if board[0][0] == board[1][1] == board[2][2] == player or \
       board[0][2] == board[1][1] == board[2][0] == player:  # Diagonals 
        return True
    return False


def tally_wins(results):
    """
    Leveraging the fact that in Python: True = 1 and False = 0 
    we can use sum() to count the number of wins by counting all Trues and Falses

    Parameters
    ----------
    results : any
        Contains the results of all the games won.
    
    Returns
    ----------
    results : any
        Returns the results variable.
    
    Examples
    ----------

    """
    return sum(results)


def main():
    """
    The main logic of the game.

    Parameters
    ----------
    current_player : string
        Is the current player.
    moves : int
        Contains how many moves/turns have been played.
    results : list
        Contains the results of the game in a list.
    row : int
        Contains the rows of the game board.
    col : int
        Contains the columns of the game board.
    board : list of lists that contains strings.
        This is the game board
    win : bool
        Uses the is_win() function to check if the current player
        has won the game.
    
    Examples
    ----------
    >>> main()
     | | 
    -----
     | | 
    -----
     | | 
    -----
    Player X, enter row and column (0-2) separated by space: 0 0
    X| | 
    -----
     | | 
    -----
     | | 
    -----
    Player O, enter row and column (0-2) separated by space: 2 2
    X| | 
    -----
     | | 
    -----
     | |O
    -----
    Player X, enter row and column (0-2) separated by space: 
    """
    current_player = 'X'
    moves = 0
    results = []

    while moves < 9:
        print_board()
        # ChatGPT chose an unusual way to implement this. `map` applies the function int to each element split out of the input string.
        # Note that list comprehensions are more Pythonic, easier to read, and in recent versions of Python, faster.
        row, col = map(int, input(f"Player {current_player}, enter row and column (0-2) separated by space: ").split())
        if board[row][col] == ' ':
            board[row][col] = current_player
            win = is_win(current_player)
            results.append(win)
            if win:
                print_board()
                print(f"Player {current_player} wins!")
                return
            current_player = 'O' if current_player == 'X' else 'X'  # Switch player
            moves += 1
        else:
            print("Cell already occupied! Try again.")
    print_board()
    print("It's a draw!")
    print(f"Number of wins during the game: {tally_wins(results)}")


if __name__ == "__main__":
    main() 
